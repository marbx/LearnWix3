<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
  <Product
      Manufacturer='$(var.MANUFACTURER)'
      Name='$(var.PRODUCT)'
      Version='$(var.VERSION)'
      Language='1033'
      UpgradeCode='fc67ab4e-2f1a-47bb-a64f-5c17ff8107da'
      Id='*'>


    <!--  Install per Machine -->
    <Package InstallScope="perMachine" InstallerVersion='500' Compressed='yes'/>


    <!--  Aborts -->
    <?if $(var.WIN64)="no" ?>
      <Condition Message="The 32bit variant must be installed on 32bit Windows.">Not VersionNT64</Condition>
    <?endif?>
    <Condition Message="Abort [AbortReason]">Installed or (not AbortReason)</Condition>

    <Property Id="ROOTDRIVE" Value="C:\"/> <!-- prevent msi to chose the drive with most space left -->

    <!-- Allow command line alias for Property  -->
    <SetProperty  Id="INSTALLDIR" Value='[INSTALLFOLDER]'   Before="LaunchConditions">INSTALLFOLDER</SetProperty>
    <!-- Old configdir  -->
    <SetProperty  Id="OCONFIGDIR"  Value='C:\$(var.PRODUCT)' Before="LaunchConditions">1</SetProperty>

    <!-- Search Previously installed msi and Nullsoft (assumes that Nullsoft is in 32bit registry)-->
      <Property Id="PINSTALLDIR">
        <RegistrySearch Root="HKLM" Key="SOFTWARE\$(var.MANUFACTURER)\$(var.PRODUCT)" Name="root_dir"  Win64="$(var.WIN64)" Type="raw" Id="rsi" />
        <RegistrySearch Root="HKLM" Key="SOFTWARE\$(var.MANUFACTURER)\$(var.PRODUCT)" Name="root_dir"  Win64="no"           Type="raw" Id="rsi_nullsoft" />
      </Property>
      <Property Id="PCONFIGDIR">
        <RegistrySearch Root="HKLM" Key="SOFTWARE\$(var.MANUFACTURER)\$(var.PRODUCT)" Name="config_dir" Win64="$(var.WIN64)" Type="raw" Id="rsc"/>
        <RegistrySearch Root="HKLM" Key="SOFTWARE\$(var.MANUFACTURER)\$(var.PRODUCT)" Name="config_dir" Win64="no"           Type="raw" Id="rsc_nullsoft"/>
      </Property>
    <!-- Previously installed Nullsoft? todo -->

    <!--  Default directory layout, can be modified by setting properties.  -->
    <Directory Id='TARGETDIR' Name='SourceDir'>    <!-- fixed expression -->
      <Directory Id="$(var.PROGRAMFILES)">    <!-- typically    C:\Program Files or   C:\Program Files (x86) -->
        <Directory Id='installparent' Name='$(var.MANUFACTURER)'>
          <Directory Id='INSTALLDIR' Name='$(var.PRODUCT)'/> <!-- user can set/override this in CLI or GUI  -->
        </Directory>
      </Directory>
      <Directory Id="CommonAppDataFolder">    <!-- typically    %ProgramData% C:\ProgramData  but NOT AppData-->
        <Directory Id="configparent" Name="$(var.MANUFACTURER)">
          <Directory Id="CONFIGDIR" Name="$(var.PRODUCT)">
            <Component Id='Config.component' Win64="$(var.WIN64)">
              <File Id='Config.fileID' Source="$(var.CONFIG)" KeyPath='yes'/>
            </Component>
          </Directory>
        </Directory>
      </Directory>
    </Directory>
    <!-- Set INSTALLDIR to previous install (before GUI and before install sequence) -->
    <SetProperty Id="INSTALLDIR" Value='[PINSTALLDIR]' Sequence="both"    Before="CostFinalize" Action="sid1">not MOVE_CONF and     PINSTALLDIR</SetProperty>
    <!-- Set CONFIGDIR to previous install or old layout  (only before install sequence) -->
    <SetProperty Id="CONFIGDIR"  Value='[PCONFIGDIR]'  Sequence="execute" Before="CostFinalize" Action="scd1">not MOVE_CONF and     PCONFIGDIR</SetProperty>
    <SetProperty Id="CONFIGDIR"  Value='[OCONFIGDIR]'  Sequence="execute" Before="CostFinalize" Action="scd2">not MOVE_CONF and not PCONFIGDIR</SetProperty>


    <!--  Assemble the Features  -->
    <Feature Id='Complete'>
      <ComponentGroupRef Id="DiscoveredFiles" />
      <ComponentRef      Id='Config.component'/>
    </Feature>


    <!--  The GUI Sequence  -->
    <!--
      Run with admin privilege.
      No changes applied. msi asks for input from the user
      https://docs.microsoft.com/en-us/windows/win32/msi/suggested-installuisequence
      This sequence may be left out.
      -->
    <InstallUISequence>
      <Custom Action='ReadConfig_IMCAC'       Before='LaunchConditions'  >NOT Installed</Custom>
    </InstallUISequence>


    <!--  The Install Sequence  -->
    <!--
      Run with localsystem privilege (aka server side).
      https://docs.microsoft.com/en-us/windows/win32/msi/suggested-installexecutesequence
      If the UI sequence took place, some (non-UI) actions can be are repeated (e.g. CostInitialize).

      Actions before MigrateFeatureStates:
        Custom action is placed before the transaction starts, coined "immediate".
        You should not modifiy the system.
      Actions after InstallFiles:
        Custom action is placed after the transaction started, coined "deferred" and run in a sandbox.
        Deferred custom actions (DECAC) need custum action helper (CADH) to access msi properties
        You may modify the system.
      -->
    <InstallExecuteSequence>
      <Custom Action='ReadConfig_IMCAC'       Before='LaunchConditions'  >NOT Installed</Custom>
      <Custom Action='WriteConfig_CADH'
              Before='WriteConfig_DECAC'                                 >NOT Installed</Custom>
      <Custom Action='WriteConfig_DECAC'      After='InstallFiles'       >NOT Installed</Custom>
    </InstallExecuteSequence>


    <!--  The Custom Actions  -->
    <Binary Id='CustomAction01' SourceFile='CustomAction01\CustomAction01.CA.dll'/>

    <!--      IMMEDIATE CUSTOM ACTION (IMCAC) run before the transaction and should not modify the system -->
    <CustomAction
      Id="ReadConfig_IMCAC"
      DllEntry='ReadConfig_IMCAC'
      BinaryKey='CustomAction01'
      Execute='firstSequence'/>

    <!--      DEFERRED CUSTOM ACTION (DECAC) runs in a transaction and may modify the system -->
    <CustomAction
      Id="WriteConfig_DECAC"
      DllEntry='WriteConfig_DECAC'
      BinaryKey='CustomAction01'
      Execute='deferred'
      Return='check'
      Impersonate='no'/>

    <!--      Pass msi properties to the DEFERRED CUSTOM ACTION (DECAC)  -->
    <CustomAction
      Id="WriteConfig_CADH"
      Property="WriteConfig_DECAC"
      Value="CONFIGDIR_OLD=[CONFIGDIR_OLD];CONFIGDIR_NEW=[CONFIGDIR_NEW];MOVE_CONF=[MOVE_CONF];" />


    <!--  The GUI  -->
    <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR"/>
    <UI Id="ProductUI">
      <UIRef Id="WixUI_InstallDir" />
      <Publish Dialog="InstallDirDlg"     Control="Next" Event="NewDialog" Value="VerifyReadyDlg" Order="4">1</Publish>
    </UI>


    <!--  No cab  -->
    <MediaTemplate EmbedCab="yes"/>
  </Product>
</Wix>
